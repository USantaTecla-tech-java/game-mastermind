@startuml mastermind_analisis
package views {
    class PlayerView
    class StartView
    class ProposeView
    class ResumeView
    class BoardView
    class ProposedCombinationView
    class SecretCombinationView
    class ResultView
    class ColorView
    enum Message
    class ErrorView
}

PlayerView *-down-> StartView
PlayerView *-down-> ProposeView
PlayerView *-down-> ResumeView
StartView .down.> BoardView
ProposeView .down.> BoardView
BoardView .down.> ProposedCombinationView
BoardView .down.> ResultView
BoardView .down.> Message
BoardView .down.> SecretCombinationView
ProposedCombinationView .down.> ColorView
ProposedCombinationView .down.> ErrorView
ProposedCombinationView .down.> Message
ResultView .down.> Message
StartView .down.> Message
ResumeView .down.> Message
ProposeView .down.> ProposedCombinationView
ProposeView .down.> Message

package controllers {
    abstract class Controller
    class StartController
    class ProposeController
    class ResumeController
    class ShowBoardController
}

Controller <|-- StartController
Controller <|-- ProposeController
Controller <|-- ResumeController
Controller <|-- ShowBoardController
StartController *-down-> ShowBoardController
ProposeController *-down-> ShowBoardController

package models {
    class Board
    class Combination
    class ProposedCombination
    class SecretCombination
    Combination <|-- ProposedCombination
    Combination <|-- SecretCombination
    class Result
}

package types {
    enum Color
    enum Error
}

Board *-down-> ProposedCombination
Board *-down-> SecretCombination
Board *-down-> Result
SecretCombination .down.> Result
SecretCombination .down.> ProposedCombination

views .down.> controllers
controllers .down.> models
views .down.> types
models .down.> types
@enduml

@startuml mastermind_analisis_usecase_start
allow_mixing

actor Player

package views {
    object StartView
    object Message
    object BoardView
    object SecretCombinationView
    object ProposedCombinationView
    object ResultView
    object ColorView
}

package controllers {
    object "startController\n:StartController" as StartController
}

package models {
    object Board
    object Result
    object ProposedCombination
}

package types {
    object "color\n:Color" as Color
}

Player -down-> StartView
note on link
    start()
end note
StartView .down.> Message
note on link
    write()
end note
StartView .down.> BoardView
note on link
    write(startController)
end note
BoardView .down.> StartController
note on link
    getAttempts()
    getProposedCombinationColors(position)
    getBlacks(position)
    getWhites(position)
end note
BoardView .down.> Message
note on link
    write(attempts)
end note
BoardView .down.> SecretCombinationView
note on link
    write()
end note
SecretCombinationView .down.> Message
note on link
    write()
end note
BoardView .down.> ProposedCombinationView
note on link
    write(colors)
end note
ProposedCombinationView .down.> ColorView
note on link
    write(color)
end note
ColorView .down.> Color
BoardView .down.> ResultView
note on link
    write(blacks, whites)
end note
ResultView .down.> Message
note on link
    write(blacks, whites)
end note
StartController -down-> Board
note on link
    getAttempts()
    getProposedCombinationColors(position)
    getBlacks(position)
    getWhites(position)
end note
Board *-down-> Result
note on link
    getBlacks()
    getWhites()
end note
Board *-down-> ProposedCombination
note on link
    getColors()
end note
ProposedCombination *-down-> Color
Board .down.> Color
StartController .down.> Color
BoardView .down.> Color
ProposedCombinationView .down.> Color
@enduml

@startuml mastermind_analisis_usecase_propose
allow_mixing

actor Player

package views {
    object ProposeView
    object Message
    object BoardView
    object SecretCombinationView
    object ProposedCombinationView
    object ResultView
    object ColorView
    object ErrorView
}

package controllers {
    object "proposeController\n:ProposeController" as ProposeController
}

package models {
    object Board
    object Result
    object "proposedCombination\n:ProposedCombination" as ProposedCombination
    object SecretCombination
}

package types {
    object "color\n:Color" as Color
    object "error\n:Error" as Error
}

Player -down-> ProposeView
note on link
    propose()
end note
ProposeView .down.> BoardView
note on link
    write(proposeController)
end note
BoardView .down.> ProposeController
note on link
    getAttempts()
    getProposedCombinationColors(position)
    getBlacks(position)
    getWhites(position)
end note
BoardView .down.> Message
note on link
    write(attempts)
end note
BoardView .down.> SecretCombinationView
note on link
    write()
end note
SecretCombinationView .down.> Message
note on link
    write()
end note
BoardView .down.> ProposedCombinationView
note on link
    write(colors)
end note
ProposedCombinationView .down.> ColorView
note on link
    write(color)
end note
ColorView .down.> Color
BoardView .down.> ResultView
note on link
    write(blacks, whites)
end note
ResultView .down.> Message
note on link
    write(blacks, whites)
end note
ProposeController -down-> Board
note on link
    getError(colors)
    add(colors)
    isFinished()
    isWinner()
    getAttempts()
    getProposedCombinationColors(position)
    getBlacks(position)
    getWhites(position)
end note
Board *-down-> Result
note on link
    isWinner()
    getBlacks()
    getWhites()
end note
Board *-down-> ProposedCombination
note on link
    new(colors)
    getError()
    getColors()
end note
ProposedCombination *-down-> Color
Board .down.> Color
ProposeController .down.> Color
BoardView .down.> Color
ProposedCombinationView .down.> Color
ProposeView .down.> ProposedCombinationView
note on link
    read(proposeController)
end note
ProposedCombinationView .down.> Message
note on link
    write()
end note
ProposedCombinationView .down.> ErrorView
note on link
    write(error)
end note
ProposedCombinationView .down.> ColorView
note on link
    read()
end note
ProposedCombinationView .down.> ProposeController
note on link
    getError(colors)
    add(colors)
end note
ProposedCombination .down.> Error
ErrorView .down.> Error
ProposeView -down-> ProposeController
note on link
    isFinished()
    isWinner()
end note
ProposeView .down.> Message
note on link
    write()
end note
Board .down.> Board
note on link
    isLoser()
end note
Board *-down-> SecretCombination
note on link
    getResult(proposedCombination)
end note
SecretCombination *-down-> ProposedCombination
note on link
    contains(color)
    contains(color, position)
end note
SecretCombination *-down-> Color
SecretCombination .down.> Result
note on link
    new(blacks, whites)
end note
Board .down.> Error
@enduml

@startuml mastermind_analisis_usecase_resume
allow_mixing

actor :Player: as Playerr

package controllers  {
    object ResumeController
}

package models  {
    object Board
    object SecretCombination
}

package types  {
    object Color
}

package views {
    object ResumeView
    object Message
}

Playerr --> ResumeView
note on link
    resume()
end note
ResumeView --> ResumeController
note on link
    reset()
end note
ResumeView ..> Message
note on link
    write()
end note
ResumeController --> Board
note on link
    reset()
end note
Board *-down-> SecretCombination
note on link
    new()
end note
SecretCombination *-down-> Color
@enduml